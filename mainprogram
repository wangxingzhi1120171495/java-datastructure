package cn.edu.bit.cs;

import java.io.BufferedReader;
import java.io.FileReader;
public class EnglishWords {
public static void main(String args[])throws Exception
{
	BufferedReader br=new BufferedReader(new FileReader("D:\\Java源码\\文字统计\\英文文本.txt"));
	List myList=new List();
	String readline=null;
	while ((readline=br.readLine())!=null)
	{
		String[] wordsArr1=readline.split("[^a-zA-Z]");//除去不是字母的
		for (String word:wordsArr1)
		{
			if(word.length()!=0)
			{
				myList.headInsert(word);
			}
		}
	}
	br.close();
	myList.print();
}
}
class Node
{
	Object data;
	Node next;//指向下一个list，相当于指针
	Object getObject()
	{
		return data;//data指向当前的对象
	}
	Object getNext()
	{
		return next;
	}
}
class List 
{
	private Node head;
	private int length;
	//private Node current;
	//首先将链表初始化
	public List()
	{
		head=null;
		length=0;
	}
	//清空链表的操作
	public void clean()
	{
		head=null;
		length=0;
	}
	//再头节点插入相应的元素
	public void headInsert(Object addItem)
	{
		Node p=new Node();
		p.data=addItem;
		p.next=head;
		head=p;
		length++;
	}
	//在中间的位置插入元素
	public void midInsert(int num,Object addItem)
	{
		Node current=new Node();
		Node p=new Node();
		current=head;
		
		p.data=addItem;
		if(num>0&&num<=length+1)
		{
			for (int i=0;i<num-2;i++)
			{
				current=current.next;
			}
			p.next=current.next;
			current.next=p;
			length++;
		}
	}
	//删除链表中的元素
	public void delete(int num)
	{
		Node current=new Node();
		current=head;//current指针用于位置的移动
		if(num>0&&num<=length)
		{
			if(num==1)//删除头节点
			{
				head=head.next;
				length--;
				return ;
			}
			else 
			{
				for (int i=1;i<num;i++)
				{
					if(i==num-1)//删除num处的节点，注意节点的移动
					{
						current.next=current.next.next;
						length--;
					}
					else 
					{
						current=current.next;
					}
				}
			}
		}
	}
	//打印最后的节点
	public void print()
	{
		Node current=new Node();
		current=head;
		for (int i=0;i<length;i++)
		{
			System.out.println(current.data);
			current=current.next;
		}
		System.out.println("\n");
	}
	
}

